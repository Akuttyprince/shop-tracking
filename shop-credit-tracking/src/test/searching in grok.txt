na final year ila second year and naraiya changes iruku panna vandiyathu onu one na solluran paru import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import "./customerhistry.css";

const downloadPDF = (customer) => {
  const doc = new jsPDF();

  // Header
  doc.setFillColor(33, 150, 243); // Blue
  doc.rect(0, 0, 210, 30, "F");
  doc.setFontSize(20);
  doc.setTextColor(255, 255, 255);
  doc.text("Credit Statement", 14, 15);
  doc.setFontSize(12);
  doc.text(`Customer: ${customer.name}`, 14, 25);

  // Customer Info
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(12);
  doc.text(`Phone: ${customer.phone}`, 14, 40);
  doc.text(`Date: ${new Date().toLocaleDateString()}`, 14, 50);

  // Table
  const rows = (customer.history || []).map((entry, index) => [
    index + 1,
    entry.type === "credit" ? "Credit" : "Payment",
    entry.date,
    entry.items?.join(", ") || "-",
    `₹${entry.amount.toFixed(2)}`,
  ]);

  autoTable(doc, {
    startY: 60,
    head: [["#", "Type", "Date", "Items", "Amount"]],
    body: rows,
    theme: "grid",
    headStyles: { fillColor: [33, 150, 243], textColor: [255, 255, 255] },
    bodyStyles: { textColor: [0, 0, 0] },
    alternateRowStyles: { fillColor: [245, 245, 245] },
    didParseCell: (data) => {
      if (data.section === "body" && data.column.index === 1) {
        data.cell.styles.textColor =
          data.cell.text[0] === "Credit" ? [255, 0, 0] : [0, 128, 0];
      }
    },
  });

  // Summary
  const totalCredit = (customer.history || [])
    .filter((e) => e.type === "credit")
    .reduce((sum, e) => sum + e.amount, 0);
  const totalPaid = (customer.history || [])
    .filter((e) => e.type === "payment")
    .reduce((sum, e) => sum + e.amount, 0);
  const balance = totalCredit - totalPaid;

  const summaryY = doc.lastAutoTable.finalY + 10;
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);
  doc.text(`Total Credit: ₹${totalCredit.toFixed(2)}`, 14, summaryY);
  doc.text(`Total Paid: ₹${totalPaid.toFixed(2)}`, 14, summaryY + 10);
  // doc.setTextColor(balance > 0 ? [255, 20, 0] : [0, 128, 0]);
  doc.text(`Balance Due: ₹${balance.toFixed(2)}`, 14, summaryY + 20);

  // Footer
  doc.setFillColor(33, 150, 243);
  doc.rect(0, 280, 210, 20, "F");
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(10);
  doc.text("Thala Credit App", 14, 290);

  doc.save(`${customer.name}_statement.pdf`);
};

function CustomerHistory() {
  const [credits, setCredits] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [expandedCustomer, setExpandedCustomer] = useState(null);
  const [filterOption, setFilterOption] = useState("all");
  const navigate = useNavigate();

  useEffect(() => {
    try {
      const allData = JSON.parse(localStorage.getItem("customers")) || [];
      console.log("CustomerHistory: Loaded credits", allData);
      setCredits(allData);
    } catch (error) {
      console.error("CustomerHistory: Error loading credits", error);
      setCredits([]);
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    if (credits.length > 0) {
      try {
        console.log("CustomerHistory: Saving credits", credits);
        localStorage.setItem("customers", JSON.stringify(credits));
      } catch (error) {
        console.error("CustomerHistory: Error saving credits", error);
      }
    }
  }, [credits]);

  const handleNotification = (customer) => {
    const unpaid = (customer.history || []).filter((entry) => entry.type === "credit");
    const totalUnpaid =
      unpaid.reduce((sum, item) => sum + item.amount, 0) -
      (customer.history || [])
        .filter((entry) => entry.type === "payment")
        .reduce((sum, item) => sum + item.amount, 0);
    const latestItems = unpaid[unpaid.length - 1]?.items?.join(", ") || "items";

    alert(
      `Sending SMS/WhatsApp to ${customer.name} (${customer.phone}):\n` +
      `You owe ₹${totalUnpaid.toFixed(2)}. Please pay soon.\n` +
      `Latest purchase: ${latestItems}`
    );
  };

  const deleteCredit = (customerIndex, entryIndex) => {
    const updatedCredits = [...credits];
    updatedCredits[customerIndex].history.splice(entryIndex, 1);
    setCredits(updatedCredits);
  };

  const toggleExpand = (customerId) => {
    setExpandedCustomer(expandedCustomer === customerId ? null : customerId);
  };

  const getBalance = (customer) =>
    (customer.history || []).reduce(
      (sum, entry) => (entry.type === "credit" ? sum + entry.amount : sum - entry.amount),
      0
    );

  const filteredCredits = credits.filter((customer) => {
    const searchMatch =
      customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      customer.phone.includes(searchTerm) ||
      (customer.history || []).some((entry) => entry.date.includes(searchTerm));

    if (!searchMatch) return false;

    const unpaidBalance = getBalance(customer);

    if (filterOption === "unpaid") return unpaidBalance > 0;
    if (filterOption === "paid") return unpaidBalance <= 0;
    return true;
  });

  if (isLoading) return <div className="loading">Loading history...</div>;

  const exportToCSV = () => {
    const headers = ["Name", "Phone", "Email", "Address", "Balance", "History"];
    const rows = credits.map((c) => [
      c.name,
      c.phone,
      c.email || "",
      c.address || "",
      getBalance(c).toFixed(2),
      (c.history || [])
        .map((h) => `${h.type}: ₹${h.amount.toFixed(2)} on ${h.date}`)
        .join("; "),
    ]);
    const csv = [headers, ...rows].map((row) => row.join(",")).join("\n");
    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "customers.csv";
    a.click();
  };

  const toggleReminder = (id) => {
    setCredits((prev) =>
      prev.map((c) =>
        c.id === id ? { ...c, reminder: !c.reminder } : c
      )
    );
  };

  const quickAddEntry = (id, type) => {
    const amount = prompt(`Enter ${type} amount:`);
    const value = parseFloat(amount);
    if (!value || isNaN(value) || value <= 0) return alert("Invalid amount");
  
    setCredits((prev) =>
      prev.map((c) =>
        c.id === id
          ? {
              ...c,
              history: [
                ...c.history,
                {
                  type,
                  amount: value,
                  date: new Date().toLocaleDateString(),
                  time: new Date().toLocaleTimeString(),
                  items: [],
                },
              ],
            }
          : c
      )
    );
  };

  return (
    <div className="customer-history">
      <h2>Customer History</h2>

      <div className="history-controls">
        <input
          type="text"
          placeholder="Search by name, phone, or date"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <select
          value={filterOption}
          onChange={(e) => setFilterOption(e.target.value)}
        >
          <option value="all">All</option>
          <option value="unpaid">Unpaid</option>
          <option value="paid">Paid</option>
        </select>
        <button onClick={exportToCSV}>Export to CSV</button>
        <button onClick={() => navigate("/main")}>Back to Credit Tracker</button>
      </div>

      <ul>
        {filteredCredits.map((customer) => (
          <li key={customer.id}>
            <div className="customer-header">
              <button
                onClick={() => toggleExpand(customer.id)}
                style={{ marginRight: "10px" }}
              >
                {expandedCustomer === customer.id ? "▼" : "▶"}
              </button><input
  type="checkbox"
  checked={customer.reminder || false}
  onChange={() => toggleReminder(customer.id)}
  style={{ marginLeft: "10px" }}
/>
              <h3>
                {customer.name} ({customer.phone})
                <span
                  style={{
                    marginLeft: "10px",
                    color: getBalance(customer) > 0 ? "red" : "green",
                  }}
                >
                  Balance: ₹{getBalance(customer).toFixed(2)}
                </span>
              </h3><button
  onClick={() => quickAddEntry(customer.id, "credit")}
  style={{ marginLeft: "10px" }}
>
  Add Credit
</button>
<button
  onClick={() => quickAddEntry(customer.id, "payment")}
  style={{ marginLeft: "10px" }}
>
  Add Payment
</button>
              {expandedCustomer !== customer.id && (
                <>
                  <button
                    onClick={() => handleNotification(customer)}
                    style={{ marginLeft: "10px" }}
                  >
                    Send Notification
                  </button>
                  <button
                    onClick={() => downloadPDF(customer)}
                    style={{ marginLeft: "10px" }}
                  >
                    Download PDF
                  </button>
                </>
              )}
            </div>

            {expandedCustomer === customer.id && (
              <ul>
                {(customer.history || []).map((entry, eIndex) => (
                  <li
                    key={eIndex}
                    style={{
                      color: entry.type === "credit" ? "red" : "green",
                      marginBottom: "10px",
                    }}
                  >
                    ₹{entry.amount.toFixed(2)} — {entry.items?.join(", ") || "-"} —{" "}
                    {entry.date} {entry.time || ""}
                    <button
                      onClick={() =>
                        deleteCredit(
                          credits.findIndex((c) => c.id === customer.id),
                          eIndex
                        )
                      }
                      style={{ marginLeft: "10px" }}
                    >
                      Delete
                    </button>
                  </li>
                ))}
              </ul>
            )}
          </li>
        ))}
      </ul>
      <div className="summary">
        <h3>
          Total Historical Credit: ₹
          {credits
            .reduce(
              (sum, c) => sum + getBalance(c),
              0
            )
            .toFixed(2)}
        </h3>
        <p>
          Showing {filteredCredits.length} of {credits.length} customers
        </p>
      </div>
    </div>
  );
}
export default CustomerHistory;  since we are building this for a local shopkeeper so they thing to pay for the stroage i desided to store there data as csv or in pdf formate in google drive because the drive is providing 15gb of free data for every customers so the custormers can add there google drive account and store there data in the google drive form out app and we can also add auto backup for daywise, weekwise, monthwise . to prevent data lose ..and also need to add sent notification to whatsapp for the customer to remaind them for not paying there cridet and a button for send request the money in gpay and also we need to send sms for the customer when they buy item or make payment to notify them and to avoid confussion. and also a QR-code want to send in whats app of they current cridet want to be send when we click the sent notification to whats app  button on the history ... and mainly the code i have is not clean and clear so we can create a structure and separete pages for the code and import them to main and manuplate the code.. import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import "./style.css";

function Calculator() {
  const [display, setDisplay] = useState("");

  const appendToDisplay = (value) => {
    setDisplay((prev) => prev + value);
  };

  const clearDisplay = () => {
    setDisplay("");
  };

  const calculate = () => {
    try {
      const result = new Function(`return ${display}`)();
      setDisplay(result.toString());
    } catch {
      setDisplay("Error");
      setTimeout(() => setDisplay(""), 1000);
    }
  };

  const buttonValues = ["7", "8", "9", "/", "4", "5", "6", "*", "1", "2", "3", "-", "0", ".", "=", "+"];
  const clearButton = "C";

  return (
    <div className="calculator">
      <h2>Calculator</h2>
      <input type="text" value={display} readOnly />
      <div className="buttons">
        {buttonValues.map((btn) => (
          <button
            key={btn}
            onClick={() => (btn === "=" ? calculate() : appendToDisplay(btn))}
          >
            {btn}
          </button>
        ))}
        <button onClick={clearDisplay}>{clearButton}</button>
      </div>
    </div>
  );
}

function CreditTracker({ navigate }) {
  const [customers, setCustomers] = useState([]);
  const [name, setName] = useState("");
  const [items, setItems] = useState("");
  const [phone, setPhone] = useState("");
  const [amount, setAmount] = useState("");
  const [editId, setEditId] = useState(null);

  useEffect(() => {
    try {
      const storedCustomers = JSON.parse(localStorage.getItem("customers")) || [];
      console.log("CreditTracker: Loaded customers", storedCustomers);
      setCustomers(storedCustomers);
    } catch (error) {
      console.error("CreditTracker: Error loading customers", error);
      setCustomers([]);
    }
  }, []);

  useEffect(() => {
    if (customers.length > 0) {
      try {
        console.log("CreditTracker: Saving customers", customers);
        localStorage.setItem("customers", JSON.stringify(customers));
      } catch (error) {
        console.error("CreditTracker: Error saving customers", error);
      }
    }
  }, [customers]);

  const addCredit = () => {
    if (name && amount) {
      const creditEntry = {
        type: "credit",
        date: new Date().toLocaleDateString(),
        time: new Date().toLocaleTimeString(),
        items: items ? items.split(",").map((item) => item.trim()) : [],
        amount: parseFloat(amount),
      };

      const existingIndex = customers.findIndex(
        (c) => c.name === name && c.phone === phone
      );

      if (existingIndex !== -1) {
        const updatedCustomers = [...customers];
        updatedCustomers[existingIndex].history.push(creditEntry);
        setCustomers(updatedCustomers);
      } else {
        const newCustomer = {
          id: Date.now(),
          name,
          phone,
          email: "",
          address: "",
          history: [creditEntry],
        };
        setCustomers([...customers, newCustomer]);
      }

      setName("");
      setItems("");
      setPhone("");
      setAmount("");
    } else {
      alert("Please enter name, phone, and amount!");
    }
  };

  const addPayment = (customerId) => {
    const amountPaid = prompt("Enter amount paid:");
    const value = parseFloat(amountPaid);
    if (!value || isNaN(value) || value <= 0) return alert("Invalid amount");

    const updated = customers.map((c) => {
      if (c.id === customerId) {
        return {
          ...c,
          history: [
            ...c.history,
            {
              type: "payment",
              date: new Date().toLocaleDateString(),
              time: new Date().toLocaleTimeString(),
              amount: value,
            },
          ],
        };
      }
      return c;
    });
    setCustomers(updated);
  };

  const calculateUnpaid = (history = []) => {
    const credit = history
      .filter((h) => h.type === "credit")
      .reduce((sum, h) => sum + h.amount, 0);
    const paid = history
      .filter((h) => h.type === "payment")
      .reduce((sum, h) => sum + h.amount, 0);
    return credit - paid;
  };

  const totalCredit = customers.reduce(
    (sum, customer) => sum + calculateUnpaid(customer.history),
    0
  );

  return (
    <div className="todo-list">
      <h2>Credit Tracker</h2>

      <div className="summary">
        <h3>Total Credit: ₹{totalCredit.toFixed(2)}</h3>
      </div>

      <div className="input-group">
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Customer Name"
        />
        <input
          type="text"
          value={items}
          onChange={(e) => setItems(e.target.value)}
          placeholder="Items (e.g., milk, bread)"
        />
        <input
          type="tel"
          value={phone}
          onChange={(e) => {
            const value = e.target.value.replace(/\D/g, "");
            if (value.length <= 10) setPhone(value);
          }}
          placeholder="Phone (10 digits)"
          maxLength={10}
        />
        <input
          type="number"
          value={amount}
          onChange={(e) => setAmount(e.target.value)}
          placeholder="Credit Amount"
        />
        <button onClick={addCredit}>
          {editId ? "Update Credit" : "Add Credit"}
        </button>
      </div>

      <div className="history-container">
        <button
          className="history-button"
          onClick={() => navigate("/customerhistory")}
        >
          History
        </button>
        <button
          className="plus-symbol"
          onClick={() => navigate("/customerform")}
        >
          +
        </button>
      </div>

      <ul>
        {customers.map((customer) => {
          const unpaid = calculateUnpaid(customer.history);
          if (unpaid <= 0) return null;
          return (
            <li key={customer.id}>
              <div>
                <strong>{customer.name}</strong>: ₹{unpaid.toFixed(2)}
                <br />
                <small>Phone: {customer.phone}</small>
              </div>
              <button onClick={() => addPayment(customer.id)}>
                Pay Amount
              </button>
            </li>
          );
        })}
      </ul>
    </div>
  );
}

function MainPage() {
  return (
    <div className="app">
      <h1>Shop Management</h1>
      <div className="features">
        <Calculator />
        <CreditTracker navigate={useNavigate()} />
      </div>
    </div>
  );
}

export default MainPage;  need the same request clean and clear , separate pages for the all. here we need to combine the calculator and the cridet tracter because every time they cant use mouse to do calculation and add different item because if the customer but 20 item means the work flow will increase so we need to combine it like first if the customer is alread in data base while clicking the name input the list of customers has to show and the while typing the name the it must filter and while clicking the customer the name , mobile, address has to be filled as default and non editable we need to edite only in the add customer form . and after selecting the customer a second input box which we need to enter the item and after clicking the enter button we need to type the amount and this process has to be repet untile all the item is entered ( need to to make a discound and multiple - for repeated product and cupen). and the data showing is to be same as before and while sending msg - in primary we will add mobile but in seconday if the customer is not exist it will create a new customer and after if we need means we can modify they data so for easy use we accept only name and amout as requied if the shopkeeper need means he can modify it after. so while sending sms if number is not present or mismatich it has to tell the shop keeper and also we need to add a feature which my friend suggest me like borrowing  an advance amount  from the customer to make the customer as a trustable person because if the person fail to pay on time means the shopkeeper can lend the money like bank loan did.. and while showing the current cridet or in history a repeated or regular customer has to be shown first because they will be come often so it is easy to add cridet to them easier . if excess we can also add a verification like adding aadhar number in optional for the new or unknown guy to the shopkeeper . while every time we modifying the data (if the number of the particular customer is present ) a sms has to be sent to them every time and sometime customer may also not like to recive the sms so by default the sms has to be send and if customer is not like it there must be an option for the shopkeeper to turn it off ..import { useEffect, useState } from "react";
import './form.css';

const CustomerForm = () => {
  const [customer, setCustomer] = useState({
    name: "",
    email: "",
    phone: "",
    address: "",
    history: [],
  });
  const [customers, setCustomers] = useState([]);
  const [editId, setEditId] = useState(null);
  const [expandedCustomer, setExpandedCustomer] = useState(null);

  // Load from localStorage
  useEffect(() => {
    try {
      const storedCustomers = JSON.parse(localStorage.getItem("customers")) || [];
      console.log("CustomerForm: Loaded customers", storedCustomers); // Debug
      setCustomers(storedCustomers);
    } catch (error) {
      console.error("CustomerForm: Error loading customers", error);
      setCustomers([]);
    }
  }, []);

  // Save to localStorage
  useEffect(() => {
    if (customers.length > 0) {
      try {
        console.log("CustomerForm: Saving customers", customers); // Debug
        localStorage.setItem("customers", JSON.stringify(customers));
      } catch (error) {
        console.error("CustomerForm: Error saving customers", error);
      }
    }
  }, [customers]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setCustomer((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!customer.name || !customer.email || !customer.phone || !customer.address) {
      alert("Please fill all required fields!");
      return;
    }

    if (editId !== null) {
      setCustomers((prev) =>
        prev.map((c) =>
          c.id === editId
            ? { ...customer, id: editId, history: c.history || [] }
            : c
        )
      );
      setEditId(null);
    } else {
      setCustomers((prev) => [
        ...prev,
        { ...customer, id: Date.now(), history: customer.history || [] },
      ]);
    }

    setCustomer({ name: "", email: "", phone: "", address: "", history: [] });
  };

  const handleEdit = (id) => {
    const customerToEdit = customers.find((c) => c.id === id);
    if (customerToEdit) {
      setCustomer({ ...customerToEdit, history: customerToEdit.history || [] });
      setEditId(id);
    }
  };

  const handleDelete = (id) => {
    const confirmDelete = window.confirm("Are you sure you want to delete this customer?");
    if (confirmDelete) {
      setCustomers((prev) => prev.filter((c) => c.id !== id));
    }
  };

  const handleClearAll = () => {
    const confirmClear = window.confirm("Clear all customers?");
    if (confirmClear) {
      setCustomers([]);
      localStorage.setItem("customers", JSON.stringify([]));
    }
  };

  const toggleExpand = (id) => {
    setExpandedCustomer(expandedCustomer === id ? null : id);
  };

  return (
    <div className="customer-page-container">
      <div className="form-section">
        <h2>{editId ? "Edit Customer" : "Add New Customer"}</h2>
        <form onSubmit={handleSubmit} className="customer-form">
          <div className="form-group">
            <label htmlFor="name">Full Name:</label>
            <input
              type="text"
              id="name"
              name="name"
              value={customer.name}
              onChange={handleChange}
              required
              placeholder="Enter customer name"
            />
          </div>
          <div className="form-group">
            <label htmlFor="email">Email:</label>
            <input
              type="email"
              id="email"
              name="email"
              value={customer.email}
              onChange={handleChange}
              required
              placeholder="Enter customer email"
            />
          </div>
          <div className="form-group">
            <label htmlFor="phone">Phone:</label>
            <input
              type="tel"
              id="phone"
              name="phone"
              value={customer.phone}
              onChange={handleChange}
              required
              placeholder="Enter phone number"
              maxLength={10}
            />
          </div>
          <div className="form-group">
            <label htmlFor="address">Address:</label>
            <textarea
              id="address"
              name="address"
              value={customer.address}
              onChange={handleChange}
              required
              placeholder="Enter customer address"
            />
          </div>
          <button type="submit" className="submit-btn">
            {editId ? "Update Customer" : "Add Customer"}
          </button>
        </form>
      </div>

      <div className="contacts-section">
        <h2>Customer List</h2>
        {customers.length === 0 ? (
          <p>No customers yet</p>
        ) : (
          <>
            <button onClick={handleClearAll} className="clear-btn">
              Clear All
            </button>
            <ul className="contact-list">
              {customers.map((customer) => (
                <li key={customer.id} className="contact-item">
                  <div className="customer-header">
                    <button
                      onClick={() => toggleExpand(customer.id)}
                      style={{ marginRight: "10px", background: "none", border: "none", cursor: "pointer" }}
                    >
                      {expandedCustomer === customer.id ? "▼" : "▶"}
                    </button>
                    <strong>{customer.name}</strong>
                    <span style={{ marginLeft: "10px", color: (customer.history || []).reduce((sum, e) => (e.type === "credit" ? sum + e.amount : sum - e.amount), 0) > 0 ? "red" : "green" }}>
                      Balance: ₹{(customer.history || []).reduce((sum, e) => (e.type === "credit" ? sum + e.amount : sum - e.amount), 0).toFixed(2)}
                    </span>
                  </div>
                  {expandedCustomer === customer.id && (
                    <div className="customer-details">
                      <p>Email: {customer.email || "N/A"}</p>
                      <p>Phone: {customer.phone}</p>
                      <p>Address: {customer.address || "N/A"}</p>
                      {customer.history && customer.history.length > 0 ? (
                        <div>
                          <strong>History:</strong>
                          <ul>
                            {customer.history.map((entry, index) => (
                              <li
                                key={index}
                                style={{
                                  color: entry.type === "credit" ? "red" : "green",
                                }}
                              >
                                {entry.type === "credit" ? "Credit" : "Payment"}: ₹
                                {entry.amount.toFixed(2)} - {entry.date}{" "}
                                {entry.items?.join(", ") || ""}
                              </li>
                            ))}
                          </ul>
                        </div>
                      ) : (
                        <p>No history available</p>
                      )}
                      <div className="btn-group">
                        <button
                          onClick={() => handleEdit(customer.id)}
                          className="edit-btn"
                        >
                          Edit
                        </button>
                        <button
                          onClick={() => handleDelete(customer.id)}
                          className="delete-btn"
                        >
                          Delete
                        </button>
                      </div>
                    </div>
                  )}
                </li>
              ))}
            </ul>
          </>
        )}
      </div>
    </div>
  );
};

export default CustomerForm;   same make the clean and clean, separate code for all. and  dont need a full history to been shown . we can make it as last five to been shown . and also need to make them as a group like whats app to access easier because if 50 customers are come ofter to shop and make cridet means searching became time consuption . so if one family has 4 person with separate account then we can make them as a group like whats app because if someone is miss the payment means( like if my father is miss the payment means the shopkeeper will tell me or notify me when i go there meas like i cant reach ur father ple tell him to pay the balance which i send him whats app the statement like that we need to do it in the app) we can send the notification to other members so they can convey him. and the groping is also need to be in the history page to make it access faster .. and in addition we can also set a predefine value for item and store them in the local stroage so that like selecting the existing name or if not present it create a new like that while entering the item if it is alread we defined with value means it becasue easy and we can also a count to it if the item is repeated . so the work became easier like the cash meachine in the food shops . and we need to add a anthore option also like if data deleted means while importing the csv file which in drive it must add the local stroag is it possible . if possible make it and .. i have a doute bro if local stroage data deleted means did the item will show to them if we import it means. and for temporary for testing and demo i have hosted it the ip address is changed so i can find my old data so for that i thing we can use mangos to create a login and stroage the information for showing the demo and testing purpose and after that we can remove because every time we cant feed data manually . what is ur suggestion wihich is good and which is bad and what else i can add to make it a shopkeeper friendly . and easy to use. i know that the initail setup like feeding the item with value and adding customer and creating a group is time consuption process but it is only the initaial setup . after that the work became easy i am right. import React, { useState } from "react";
import "./Constyle.css";
import myImage from './menu.png';
function App() {
  const [menuOpen, setMenuOpen] = useState(false);

  const toggleMenu = () => setMenuOpen(!menuOpen);

  return (
    <>
      <header>
        <div className="profile-container" onClick={toggleMenu}>
          <div className="porfile-div">
          <img
            src={myImage}
            alt="Profile"
            className="profile-pic"
          />
          </div>
          <div className={`menu ${menuOpen ? "open" : ""}`}>
            <a href="/main" title="Dashboard">📊</a>
            <a href="/customerform" title="Add Customer">➕</a>
            <a href="#backup" title="Backup">☁️</a>
            <a href="#notifications" title="Notify">🔔</a>
            <a href="#pdf" title="PDF Report">📄</a>
            
          </div>
        </div>
        <h1 className="title">Local Credit Manager</h1>
      </header>

      <main>
        <section className="content">
          <h2>Welcome to Local Credit Manager 📋</h2>
          <p>
            This web app is designed for <strong>local shopkeepers</strong> to
            manage and track <strong>credit history</strong> of their customers.
          </p>
          <ul>
            <li>📌 Store customer details and transactions in <strong>localStorage</strong>.</li>
            <li>🔐 Option to <strong>create account</strong> and backup data online.</li>
            <li>🔔 Send notifications/reminders to customers with <strong>GPay requests</strong>.</li>
            <li>🧾 Generate and download credit statements in <strong>PDF format</strong>.</li>
            <li>💰 Track <strong>total credit</strong> and <strong>total collected</strong> amounts.</li>
            <li>🛠️ Future update: <strong>Move</strong> feature to be implemented soon!</li>
          </ul>
          <button><a href="/main">Calculator</a> </button>
        </section>
      </main>
    </>
  );
}

export default App;
here i can click the button in the header menu import React from 'react';
import "../components/hom.css";
import App from './Contact';

function Header() {
  return (
    
    <>
    <App />
      {/* <header>
        <div className='header'>
          <h1>Welcome to Shop Credit & Tracking</h1>
        </div>
        <div className="profile-container">
          <img
            src="https://i.pravatar.cc/100"
            alt="Profile"
            className="profile-pic"
          />
          <div className="menu">
            <a href="#home" title="Home">🏠</a>
            <a href="#about" title="About">👤</a>
            <a href="#services" title="Services">💼</a>
            <a href="#projects" title="Projects">📁</a>
            <a href="#contact" title="Contact">📞</a>
            <a href='/main' title='Calculator'>🔢</a>
          </div>
        </div>
      </header> */}
    </>
  );
}

function Home() {
  

  return (
    <div>
      <Header />

     

      {/* 🔽 REMAINING CONTENT BELOW 🔽 */}
      <main className="main-content">
        <section id="about" className="intro">
          <h2>About Us</h2>
          <h3>Our Mission</h3>
          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
          <h3>Why Choose Us?</h3>
          <p>Vestibulum ac velit at sapien interdum tincidunt.</p>
          <h3>How It Works</h3>
          <p>Curabitur nec massa et quam malesuada convallis.</p>
          <h3>Customer Benefits</h3>
          <p>Donec sed sapien auctor, ultrices lacus at, cursus lectus.</p>
          <h3>Security and Reliability</h3>
          <p>Quisque a libero vitae orci vulputate vehicula.</p>
          <h3>Innovation and Technology</h3>
          <p>Morbi in odio sed ex congue egestas id id justo.</p>
          <h3>Future Goals</h3>
          <p>Sed sollicitudin elit nec mi hendrerit, ut gravida nulla cursus.</p>
        </section>

        <section id="features" className="features">
          <h2>Features</h2>
          <ul>
            <li>Calculate totals with our built-in calculator.</li>
            <li>Track customer purchases and credits in the to-do list.</li>
            <li>Easy navigation and user-friendly interface.</li>
            <li>Generate detailed reports and analytics.</li>
            <li>Secure data storage and access control.</li>
          </ul>
        </section>

        <section id="demo" className="demo">
          <h2>Watch Our Demo</h2>
          <p>See how Shop Credit & Tracking can simplify your business.</p>
          <video width="600" controls>
            <source src="shop_tracking_demo.mp4" type="video/mp4" />
            Your browser does not support the video tag.
          </video>
        </section>
      </main>

      <footer className="footer">
        <div className="footer-section">
          <h3>F1 Section</h3>
          <p>Providing seamless credit tracking solutions.</p>
        </div>
        <div className="footer-section">
          <h3>F2 Section</h3>
          <p>Enhancing financial transparency for businesses.</p>
        </div>
        <div className="footer-bottom">
          <p>&copy; 2025 Shop Credit & Tracking. All rights reserved.</p>
          <p >Contact us: rajjyuva3@2006 | +91 7358271217</p>
        </div>
      </footer>
    </div>
  );
}

export default Home;
add some content in the the dashboard to make it as guide and userfriendly with friquently asked queston, how to use, what are the feature, complexity , advantages, disadvantages, how to like google drive how to add customers , how to add groups , how send notification work . what is main perpuse, who developted it .  and like this add some extra content also make a feed back section also to get feedback or error, to improve our self because my hero will all ways learn from his mistake can u guss who is he....  import React from 'react';
import "../components/hom.css";
import App from './Contact';

function Header() {
  return (
    
    <>
    <App />
      {/* <header>
        <div className='header'>
          <h1>Welcome to Shop Credit & Tracking</h1>
        </div>
        <div className="profile-container">
          <img
            src="https://i.pravatar.cc/100"
            alt="Profile"
            className="profile-pic"
          />
          <div className="menu">
            <a href="#home" title="Home">🏠</a>
            <a href="#about" title="About">👤</a>
            <a href="#services" title="Services">💼</a>
            <a href="#projects" title="Projects">📁</a>
            <a href="#contact" title="Contact">📞</a>
            <a href='/main' title='Calculator'>🔢</a>
          </div>
        </div>
      </header> */}
    </>
  );
}

function Home() {
  

  return (
    <div>
      <Header />

     

      {/* 🔽 REMAINING CONTENT BELOW 🔽 */}
      <main className="main-content">
        <section id="about" className="intro">
          <h2>About Us</h2>
          <h3>Our Mission</h3>
          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
          <h3>Why Choose Us?</h3>
          <p>Vestibulum ac velit at sapien interdum tincidunt.</p>
          <h3>How It Works</h3>
          <p>Curabitur nec massa et quam malesuada convallis.</p>
          <h3>Customer Benefits</h3>
          <p>Donec sed sapien auctor, ultrices lacus at, cursus lectus.</p>
          <h3>Security and Reliability</h3>
          <p>Quisque a libero vitae orci vulputate vehicula.</p>
          <h3>Innovation and Technology</h3>
          <p>Morbi in odio sed ex congue egestas id id justo.</p>
          <h3>Future Goals</h3>
          <p>Sed sollicitudin elit nec mi hendrerit, ut gravida nulla cursus.</p>
        </section>

        <section id="features" className="features">
          <h2>Features</h2>
          <ul>
            <li>Calculate totals with our built-in calculator.</li>
            <li>Track customer purchases and credits in the to-do list.</li>
            <li>Easy navigation and user-friendly interface.</li>
            <li>Generate detailed reports and analytics.</li>
            <li>Secure data storage and access control.</li>
          </ul>
        </section>

        <section id="demo" className="demo">
          <h2>Watch Our Demo</h2>
          <p>See how Shop Credit & Tracking can simplify your business.</p>
          <video width="600" controls>
            <source src="shop_tracking_demo.mp4" type="video/mp4" />
            Your browser does not support the video tag.
          </video>
        </section>
      </main>

      <footer className="footer">
        <div className="footer-section">
          <h3>F1 Section</h3>
          <p>Providing seamless credit tracking solutions.</p>
        </div>
        <div className="footer-section">
          <h3>F2 Section</h3>
          <p>Enhancing financial transparency for businesses.</p>
        </div>
        <div className="footer-bottom">
          <p>&copy; 2025 Shop Credit & Tracking. All rights reserved.</p>
          <p >Contact us: rajjyuva3@2006 | +91 7358271217</p>
        </div>
      </footer>
    </div>
  );
}

export default Home;
and that all i need ur feed back and response so that i can make my self stonger thala . i also have many idea to implement from ur guidence thala .. after completed this we can make that